import time
import traceback
from typing import Optional

import click
from prompt_toolkit import prompt
from prompt_toolkit.shortcuts import confirm
from rich.console import Console

from actions.planner import Planner
from actions.shell_manager import ShellManager
from db.models.session_model import Session
from db.repository.plan_repository import get_planner_by_id
from db.repository.session_repository import fetch_all_sessions, add_session_to_db
from db.repository.task_repository import add_task_to_plan
from roles.collector import Collector
from roles.exploiter import Exploiter
from roles.scanner import Scanner
from utils.log_common import RoleType


def preload_session(console):
    if continue_from_previous := confirm(
            "Do you want to continue from a previous session?"
    ):
        sessions = fetch_all_sessions()
        if len(sessions) == 0:
            console.print("No previous session found. Please start a new session.")
            return None
        else:
            console.print("Please select the previous session by its index (integer):")
            for i, session in enumerate(sessions):
                console.print(f"{str(i)}. {session.name} (Session ID: {session.id})")

            try:
                selected_session = sessions[int(input("Please key in your option (integer): "))]
                console.print(f"You selected: {selected_session.name}")
                return selected_session
            except (ValueError, IndexError) as e:
                console.print("You input an invalid option. Will start a new session.")
                return None

    elif continue_from_previous is False:
        return None
    else:
        print("You input an invalid option. Will start a new session.")
        return None


def initialize_session(previous_session: Optional[Session] = None) -> Session:
    if previous_session:
        session = previous_session
    else:
        init_description = prompt("Please describe the penetration testing task.\n> ", )

        session = Session(current_role_name=RoleType.COLLECTOR.value,
                          init_description=init_description,
                          current_planner_id='',
                          history_planner_ids=[])
    return session


def save_session(console, session):
    console.print("Before you quit, you may want to save the current session.")

    save_name = prompt("Please enter the name of the current session. (Default with current timestamp)\n ")

    if save_name == "":
        save_name = str(time.time())

    session.name = save_name

    add_session_to_db(session_data=session)

    console.print(f"The current session is saved with the name {save_name}")

    return


@click.command(help="VulnBot")
@click.option("-m", "--max_interactions", "max_interactions", default=5, help="Maximum interactions per role")
def main(max_interactions):
    global current_role
    try:
        console = Console()
        # Load the previous plan ID
        previous_session = preload_session(console)

        # Initialize the plan requirements
        session = initialize_session(previous_session)

        roles = {
            RoleType.COLLECTOR.value: Collector,
            RoleType.SCANNER.value: Scanner,
            RoleType.EXPLOITER.value: Exploiter
        }

        role = roles.get(session.current_role_name)
        try:
            current_role = role(console, max_interactions)
            current_role.run(session)

        except Exception as e:
            current_role.put_message(session)
            console.print(f"Exception: {e}", style="bold red")
            console.print(traceback.format_exc(), style="dim")

        save_session(console, session)

    finally:
        ShellManager.get_instance().close()
